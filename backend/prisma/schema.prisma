// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model User {
  id         Int    @id @default(autoincrement())
  uuid       String @unique @default(uuid()) @db.Uuid
  first_name String
  last_name  String
  email      String @unique
  password   String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  token      Token?
}

model Token {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(uuid()) @db.Uuid
  access_token  String   @unique
  refresh_token String   @unique
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int      @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

enum KPIType {
  TOTAL_VALUE
  ACTIVE_CONTRACTS_COUNT
  //TODO: add third kpi
  //TODO: add fourth kpi
}

model KPI {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid()) @db.Uuid

  type  KPIType
  value Float?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Company {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid()) @db.Uuid

  name String // Company nickname defined by the user.

  // The legal name is the name that appears in the formal documents. 
  // 
  // These names often have a “legal ending” such as LLC, Inc., or LLP.
  legal_name String

  trade_name String // Trade/Business/Fictitious/DBA company name.

  // Company Tax Identification Number. Depends on the jurisdiction.
  tax_id String @unique

  contracts Contract[]

  state String
  city  String
  logo  String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Contract {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid()) @db.Uuid

  fee            Int // Contract fee in %
  effective_date DateTime
  signed_at      DateTime

  company    Company @relation(fields: [company_id], references: [id], onDelete: NoAction)
  company_id Int     @unique

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Department {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid()) @db.Uuid

  name     String
  services Service[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Service {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid()) @db.Uuid

  departments Department[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}
